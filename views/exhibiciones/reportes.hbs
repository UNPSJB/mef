<h1>Pedidos Demorados</h1>

<!-- Botón para exportar a PDF -->
<div style="text-align: center; margin-bottom: 20px;">
  <button id="exportPDF" class="btn btn-primary">Exportar a PDF</button>
</div>

<!-- Card que contiene el gráfico y la tabla -->
<div class="card" id="reportContent" style="max-width: 800px; margin: auto; padding: 20px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
  <!-- Selector de Año alineado a la izquierda debajo del título -->
  <div style="margin-bottom: 20px;">
    <label for="selectorAnio">Seleccionar Año:</label>
    <select id="selectorAnio" class="form-control mb-3" style="width: 200px;">
      {{#each anios}}
        <option value="{{this}}">{{this}}</option>
      {{/each}}
    </select>
  </div>

  <!-- Gráfico de Torta -->
  <div style="max-width: 400px; margin: auto;">
    <canvas id="myChart"></canvas>
  </div>

  <!-- Tabla debajo del gráfico con bordes en toda la tabla, color primero -->
  <div style="margin-top: 20px;">
    <table class="table table-bordered" style="border: 1px solid #000;">
      <thead>
        <tr>
          <th style="border: 1px solid #000;">Color</th>
          <th style="border: 1px solid #000;">Motivo de Demora</th>
          <th style="border: 1px solid #000;">Cantidad de Pedidos</th>
        </tr>
      </thead>
      <tbody id="tablaDemoras">
        <tr>
          <td style="background-color: rgb(255, 99, 132); width: 50px; border: 1px solid #000;"></td>
          <td style="border: 1px solid #000;">Falta de Personal</td>
          <td id="personal" style="border: 1px solid #000;">{{ pedidosDemorados.falta_de_personal }}</td>
        </tr>
        <tr>
          <td style="background-color: rgb(255, 159, 64); width: 50px; border: 1px solid #000;"></td>
          <td style="border: 1px solid #000;">Falta de Material</td>
          <td id="material" style="border: 1px solid #000;">{{ pedidosDemorados.falta_de_material }}</td>
        </tr>
        <tr>
          <td style="background-color: rgb(255, 205, 86); width: 50px; border: 1px solid #000;"></td>
          <td style="border: 1px solid #000;">Falta de Presupuesto</td>
          <td id="presupuesto" style="border: 1px solid #000;">{{ pedidosDemorados.falta_de_presupuesto }}</td>
        </tr>
        <tr>
          <td style="background-color: rgb(75, 192, 192); width: 50px; border: 1px solid #000;"></td>
          <td style="border: 1px solid #000;">Otros</td>
          <td id="otros" style="border: 1px solid #000;">{{ pedidosDemorados.otros }}</td>
        </tr>
        <!-- Fila para el total -->
        <tr>
          <td style="border: 1px solid #000;"></td>
          <td style="border: 1px solid #000;"><strong>Total de Pedidos Demorados</strong></td>
          <td id="totalDemorados" style="border: 1px solid #000;"><strong>{{ pedidosDemorados.total_pedidos_demorados }}</strong></td>
        </tr>
      </tbody>
    </table>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>

<script>
  // SCRIPT PARA EL GRAFICO (TORTA) - Motivos de Demora
  const ctx = document.getElementById('myChart').getContext('2d');
  const dataInicial = [
    {{ pedidosDemorados.falta_de_personal }},
    {{ pedidosDemorados.falta_de_material }},
    {{ pedidosDemorados.falta_de_presupuesto }},
    {{ pedidosDemorados.otros }}
  ];

  // Calcular el total inicial
  const totalInicial = dataInicial.reduce((acc, val) => acc + val, 0);

  const defaultData = {
    labels: ['Falta De Personal', 'Falta De Material', 'Falta De Presupuesto', 'Otros'],
    datasets: [{
      label: 'Motivos de Demora',
      data: dataInicial,
      backgroundColor: [
        'rgb(255, 99, 132)',
        'rgb(255, 159, 64)',
        'rgb(255, 205, 86)',
        'rgb(75, 192, 192)'
      ],
      borderColor: [
        'rgb(255, 99, 132)',
        'rgb(255, 159, 64)',
        'rgb(255, 205, 86)',
        'rgb(75, 192, 192)'
      ]
    }]
  };

  const myChart = new Chart(ctx, {
    type: 'pie',
    data: defaultData,
    options: {
      responsive: true,
      plugins: {
        legend: {
          display: false // Ocultar la leyenda
        }
      },
    },
  });

  // Actualizar gráfico, tabla y total al cambiar el año
  document.getElementById('selectorAnio').addEventListener('change', function() {
    fetch(`/exhibiciones/reportes/data?anio=${this.value}`)
      .then(response => response.json())
      .then(data => {
        // Actualizar gráfico
        myChart.data.datasets[0].data = [
          data.falta_de_personal,
          data.falta_de_material,
          data.falta_de_presupuesto,
          data.otros
        ];
        myChart.update();

        // Actualizar tabla
        document.getElementById('personal').innerText = data.falta_de_personal;
        document.getElementById('material').innerText = data.falta_de_material;
        document.getElementById('presupuesto').innerText = data.falta_de_presupuesto;
        document.getElementById('otros').innerText = data.otros;

        // Calcular y actualizar el total
        const totalDemorados = data.falta_de_personal + data.falta_de_material + data.falta_de_presupuesto + data.otros;
        document.getElementById('totalDemorados').innerText = totalDemorados;
      });
  });

  // Exportar a PDF
  document.getElementById('exportPDF').addEventListener('click', () => {
    const { jsPDF } = window.jspdf;
    const reportContent = document.querySelector("#reportContent");

    // Ocultar el botón antes de capturar el contenido
    document.getElementById('exportPDF').style.visibility = 'hidden';

    // Capturar el contenido HTML con html2canvas
    html2canvas(reportContent).then(canvas => {
      const imgData = canvas.toDataURL("image/png");

      const pdf = new jsPDF('p', 'mm', 'a4');
      const imgWidth = 190; // Ancho de la imagen en mm
      const pageHeight = pdf.internal.pageSize.height;
      const imgHeight = canvas.height * imgWidth / canvas.width;
      let heightLeft = imgHeight;

      let position = 0;

      pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;

      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }

      pdf.save("reporte_pedidos_demorados.pdf");

      // Volver a mostrar el botón después de la exportación
      document.getElementById('exportPDF').style.visibility = 'visible';
    }).catch(error => {
      console.error('Error al capturar el contenido:', error);
      // Volver a mostrar el botón en caso de error
      document.getElementById('exportPDF').style.visibility = 'visible';
    });
  });
</script>
