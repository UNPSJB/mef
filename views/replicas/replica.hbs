<div style="padding-top: 10px">
  <h1 class="bg-secondary text-center text-white rounded p-2">
    Replicas 
  </h1>
    <table class="table table-striped table-bordered" >
        <thead>
            <th scope="col">Dinosaurio</th>
            <th scope="col">Hueso</th>
            <th scope="col">Tipo</th>
            <th scope="col">Fecha de inicio</th>
            <th scope="col">Fecha de finalizacion</th>
            <th scope="col">Disponible</th>
            <th scope="col">Acciones</th>
        </thead>
        <tbody>
        {{#each replicas}}
                <tr>
                    <td>{{this.Dinosaurio.nombre}}</td>
                    <td>{{this.Hueso.nombre}}</td>
                    <td>{{this.Pedido.tipo}}</td>
                    <td>{{this.fecha_inicio}}</td>
                    <td>{{this.fecha_fin}}</td>
                    <td>
                        <form action="/replicas/disponibilidad?_method=PATCH" method="POST">
                        <label class="switch">
                        {{#if this.disponible}}
                        <input onchange="toggleDisponible({{this.id}})" type="checkbox" checked>
                        {{else}}
                        <input onchange="toggleDisponible({{this.id}})" type="checkbox">
                        {{/if}}
                        <span class="slider round"></span>
                        </label>
                    </form>
                    </td>
                    <!-- acciones aca -->
                     <td>
                         
                         <a href="/replicas/eliminar/{{this.id}}"><span style="color:red" class="material-icons">delete</span></a>
                     </td>
                </tr>
        {{/each}}
        </tbody>    
    </table>
</div>       
<script>
  function searchBar() {
    // Declare variables
    var input, filter, table, tr, td, i, txtValue;
    input = document.getElementById("myInput");
    filter = input.value.toUpperCase();
    table = document.getElementById("tablaDinos");
    tr = table.getElementsByTagName("tr");

    // Loop through all table rows, and hide those who don't match the search query
    for (i = 0; i < tr.length; i++) {
      td = tr[i].getElementsByTagName("td")[1];
      if (td) {
        txtValue = td.textContent || td.innerText;
        if (txtValue.toUpperCase().indexOf(filter) > -1) {
          tr[i].style.display = "";
        } else {
          tr[i].style.display = "none";
        }
      }
    }
  }

  function sortTable(n) {
    var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
    table = document.getElementById("tablaDinos");
    switching = true;
    // Set the sorting direction to ascending:
    dir = "asc";
    /* Make a loop that will continue until
    no switching has been done: */
    while (switching) {
      // Start by saying: no switching is done:
      switching = false;
      rows = table.rows;
      /* Loop through all table rows (except the
      first, which contains table headers): */
      for (i = 1; i < (rows.length - 1); i++) {
        // Start by saying there should be no switching:
        shouldSwitch = false;
        /* Get the two elements you want to compare,
        one from current row and one from the next: */
        x = rows[i].getElementsByTagName("TD")[n];
        y = rows[i + 1].getElementsByTagName("TD")[n];
        /* Check if the two rows should switch place,
        based on the direction, asc or desc: */
        if (dir == "asc") {
          if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
            // If so, mark as a switch and break the loop:
            shouldSwitch = true;
            break;
          }
        } else if (dir == "desc") {
          if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
            // If so, mark as a switch and break the loop:
            shouldSwitch = true;
            break;
          }
        }
      }
      if (shouldSwitch) {
        /* If a switch has been marked, make the switch
        and mark that a switch has been done: */
        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
        switching = true;
        // Each time a switch is done, increase this count by 1:
        switchcount++;
      } else {
        /* If no switching has been done AND the direction is "asc",
        set the direction to "desc" and run the while loop again. */
        if (switchcount == 0 && dir == "asc") {
          dir = "desc";
          switching = true;
        }
      }
    }
  }
</script>

<script>
function toggleDisponible(id){
    fetch(`http://localhost:3000/replicas/disponibilidad/${id}`,{
        method:"PATCH",
        credentials:"same-origin",
    })
    //aca hago una llamada con fetch
}
</script>
{{!-- <link type="text/css" rel="stylesheet" href="toggleSwitch.css"> no funciona--}}
<style>
    /* The switch - the box around the slider */
.switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 34px;
  }
  
  /* Hide default HTML checkbox */
  .switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }
  
  /* The slider */
  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    -webkit-transition: .4s;
    transition: .4s;
  }
  
  .slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    -webkit-transition: .4s;
    transition: .4s;
  }
  
  input:checked + .slider {
    background-color: #2196F3;
  }
  
  input:focus + .slider {
    box-shadow: 0 0 1px #2196F3;
  }
  
  input:checked + .slider:before {
    -webkit-transform: translateX(26px);
    -ms-transform: translateX(26px);
    transform: translateX(26px);
  }
  
  /* Rounded sliders */
  .slider.round {
    border-radius: 34px;
  }
  
  .slider.round:before {
    border-radius: 50%;
  }
</style>