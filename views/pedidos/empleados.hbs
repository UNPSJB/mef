<h1 class="mt-4">Pedido de Replicación Nº {{id}} - Asignar empleados</h1>
<span class="bg-warning form-control">{{accion}} al siguiente pedido</span>
<form action="/pedidos?_method=PUT" method="POST">
  <div style="max-height: 60vh; overflow:scroll">
    <table class="table table-striped">
      <thead>
        <th>Asignado</th>
        <th>Identificación</th>
        <th>Nombre</th>
        <th>Apellido</th>
      </thead>
      <tbody id="listaEmpleados">
      </tbody>
    </table>
  </div>
  {{#if id}}<input name="idPedido" type="number" value="{{id}}" hidden> {{/if}}
  <!-- Botón de Asignar -->
  <div class="row justify-content-end">
    <div class="col-6">
      <button type="submit" class="btn btn-success btn-block">Asignar</button>
    </div>
  </div>
</form>

<script>
  function generateCheckbox(id, identificacion, nombre, apellido, isChecked) {
    return `<tr>
      <td>
        <label class="switch">
          <input type="checkbox" name="empleado" value="${id}" id="${id}" ${isChecked ? 'checked' : ''} />
          <span class="slider round"></span>
        </label>
      </td>
      <td>${identificacion}</td>
      <td>${nombre}</td>
      <td>${apellido}</td>
    </tr>`;
  }
</script>

<script>
  $(document).ready(() => {
    fetch(`/pedidos/{{id}}/empleados`, { mode: "cors" })
      .then((res) => res.json())
      .then((selectedEmployees) => {
        let contenedor = document.getElementById("listaEmpleados");

        fetch(`/pedidos/empleados`, { mode: "cors" })
          .then((res) => res.json())
          .then((allEmployees) => {
            let arr = [];

            // Agregar empleados seleccionados primero
            selectedEmployees.forEach((selected) => {
              const employee = allEmployees.find((emp) => emp.id === selected.id);
              if (employee) {
                arr.push(generateCheckbox(employee.id, employee.Persona.identificacion, employee.Persona.nombre, employee.Persona.apellido, true));
                arr.push("<br>");
              }
            });

            // Agregar empleados no seleccionados
            allEmployees.forEach((employee) => {
              const isSelected = selectedEmployees.find((selected) => selected.id === employee.id);
              if (!isSelected) {
                arr.push(generateCheckbox(employee.id, employee.Persona.identificacion, employee.Persona.nombre, employee.Persona.apellido, false));
                arr.push("<br>");
              }
            });

            contenedor.innerHTML = arr.join('');
          });
      });
  });
</script>
<style>
  /* The switch - the box around the slider */
  .switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 34px;
  }

  /* Hide default HTML checkbox */
  .switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  /* The slider */
  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    -webkit-transition: .4s;
    transition: .4s;
  }

  .slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    -webkit-transition: .4s;
    transition: .4s;
  }

  input:checked+.slider {
    background-color: #2196F3;
  }

  input:focus+.slider {
    box-shadow: 0 0 1px #2196F3;
  }

  input:checked+.slider:before {
    -webkit-transform: translateX(26px);
    -ms-transform: translateX(26px);
    transform: translateX(26px);
  }

  /* Rounded sliders */
  .slider.round {
    border-radius: 34px;
  }

  .slider.round:before {
    border-radius: 50%;
  }
</style>